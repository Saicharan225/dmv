Session - 5
..............Types of Pages : ........

1.Data Page - STore Data
2.Global Allocation Map (GAM) - Allocates Pages
3.Shared Global Allocation Map (SGAM) - Track the Page informaation
4.Page Free Space
5.Differential Changed Map (DCM)
6.Bulk Changed Map (BCM)
7.Index Allocation Map (IAM)
8.Boot Page - Contains Metadata
9.Text/Image Page - 

Session - 6

Go for Path : Page.md  to check Image for Below 
 Link : https://github.com/Saicharan225/SQL/blob/c8c71da9b5fdc1b48e581a7fbe103494e17b23d3/Page.md

"Clean Page" refers to a page in the buffer pool that has been retrieved from the data file (MDF) but has not yet been modified. 
When SQL Server needs a page for an operation (like an INSERT, UPDATE, or DELETE), it first checks if the page is already in the buffer pool. 
If not, it fetches the page from disk into the buffer pool. At this point, before any changes are made, the page is considered "clean."

"Dirty page" refers to a data page in the buffer cache (memory) that has been modified but has not yet been written back to the physical data files on disk.

"WAL" Write Ahead Loging The core principle of WAL is that log records describing data modifications must be written to stable storage 
(the transaction log file) before the actual modified data pages are written to the data files. 

"Checkpoint" is a process that periodically writes modified data pages (known as "dirty pages") from the in-memory buffer cache to the physical data files on disk. 
It also writes associated transaction log records from the log buffer to the transaction log file.
    Four types of checkpoints
    1. Automatic checkpoint (Instance level checkpoint)
    2. Internal checkpoint
    3. Manual checkpoint (Query - CHECKPOINT)
      ----To check logfile full due to checkpoint (Query displys Checkpint or Oldest Page
                                   Select name, log_reuse_wait_desc from Sys.databases Where name = 'database name'
    4. Indirect checkpoint (database level) 
    ... To set indirect checkpoint 
        Alter Database DATABASENAME SET TARGET_RECOVERY_TIME = 120 SECONDS;
    .....To check checkpoint time
        Select name, TARGET_RECOVERY_TIME_in_seconds from sys.databases where name = 'DATABASENAME'
......To check checkpoint logs
         Select * from ::fn_dblog(null,null) where [operation] like '%CKPT'


